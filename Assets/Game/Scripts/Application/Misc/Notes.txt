MVC框架理解
View最好不要直接GetModel来调用Model,会产生耦合
需要修改Model里的数据时，通过SendEvent发送消息，由Controller来监听事件，在Controller里获取模型并修改数据
Model不能直接监听事件

IEnumerator理解
当需要按秒来计算时，使用协程就可以精准控制秒
此外 回合控制时使用协程而不是在update里写会更方便

Git使用
1.git status 查看当前修改
2.git add . 提交至缓存区
3.git commit -m"第k次提交"  执行提交至本地仓库
4.git push -u origin master 推送至github
5.git log 查看提交记录 
6.git reflog 查看提交日志
7.git reset --hard head（地址） 回滚到某个版本

对象创建
直接说最重要的一句话，在Unity中，继承于MonoBehavior的对象，要避免使用new关键字来创建，
而必须使用AddComponent或Instantiate函数来创建，这种对象也要尽量避免使用构造函数，对应的初始化工作要在对应的Awake和Start函数中进行

协程理解更新
协程中嵌套协程会暂停外层协程 直到里层协程运行结束才会继续外层协程
协程嵌套可以有效控制流程中需要小流程的场景，例如外层控制战斗回合，里层控制动作动画（移动、攻击等等）

防止数据污染的措施
所有卡牌的原始数据都存放于GameModel中的Cards列表中
在战斗中，对卡牌数据的修改都是通过复制一份原始数据，然后修改复制的数据，不会直接修改原始数据
要修改卡牌数据时，对Card GameObject GetComponent<UIUnitStatus>().CardInfo进行修改
如果需要获取卡牌原始数据，直接通过GameModel中的Cards列表获取即可

关于效果的管理
一、效果系统结构
Effect Class (效果基类)：定义效果的基本属性和方法。
具体效果类：继承自 Effect，实现具体效果。
效果管理器：负责管理和调用效果。
Spell.UsingEffect 方法：负责使用并应用效果。
创建和初始化在GameModel.EffectManager中进行